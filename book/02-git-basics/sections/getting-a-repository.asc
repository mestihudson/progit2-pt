[[_getting_a_repo]]
=== Obtendo um Repositório Git

Você pode iniciar em um projeto Git usando dois principais métodos.
O primeiro pega um projeto existente ou diretório e o importa no Git.
O segundo clona um repositório Git existente de um outro servidor.

==== Inicializando um Repositório em um Diretório Existente

Se você está começando a rastrear um projeto no Git, você vai precisar ir ao diretório do mesmo. Se você nunca fez isso, pode ser um pouco diferente dependendo de em qual sistema você rodando:

para Linux:
[source,console]
----
$ cd /home/user/your_repository
----
para Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
para Windows:
[source,console]
----
$ cd /c/user/your_repository
----

e digite:

[source,console]
----
$ git init
----

Isto cria um novo subdiretório chamado `.git` que contem todos os arquivos de repositório necessários - um esqueleto de um repositório Git.
Neste ponto, nada no seu projeto está rastreado ainda.
(Veja <<_git_internals>> para maiores informações sobre exatamente que arquivos estão contidos no diretório `.git` que você criou.)(((git commands, init)))

Se você quiser iniciar o controle de versão de arquivos existentes (em contraposição a um diretório vazio), você deve provavelmente começar a rastrear aqueles arquivos e realizar um commit inicial.
Isso pode ser alcançado por alguns poucos comandos `git add` que especificam os arquivos que você quer rastrear, seguidos por um comando `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Nós iremos ver o que tais comandos fazem em um minuto.
Neste ponto, você tem um repositório Git com arquivos rastreador e um commit inicial.

[[_git_cloning]]
==== Clonando um Repositório Existente

Se você quer obter uma cópia de um repositório Git existente - por exemplo, um projeto para o qual você gostaria de contribuir - o comando necessário é `git clone`.
Se você está familiarizado com outros sistemas de controle de versão (VCS - Version Control Systems) tais como Subversion, você irá notar que o comando é "clone" e não "checkout".
Esta é uma importante distinção - ao invés de apenas trabalhar em um cópia, Git recebe uma cópia completa do mais próximo que os dados do servidor possui.
Toda versão de todo arquivo para a história do projeto é recuperada por padrão quando você executa `git clone`.
De fato, se o disco do seu servidor estiver corrompido, você pode, geralmente, usar qualquer dos clones que estiver mais próximo em qualquer cliente para configurar o servidor de volta ao estado em que estava quando aquele clone foi feito (você pode perder alguns `hooks` - ganchos no lado do servidor e tais, mas todos os dados armazenados estariam lá - veja <<_git_on_the_server>> para maiores detalhes).
If you want to get a copy of an existing Git repository – for example, a project you'd like to contribute to – the command you need is `git clone`.

Você clona um repositório com `git clone [url]`.(((git commands, clone)))
Por exemplo, se você quer clonar o repositório Git da biblioteca chamada libgit2, você pode fazê-lo assim:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Isso cria um diretório chamado "libgit2", inicializar um diretório dentro dele chamado `.git`, baixa todos os dados para aquele repositório, e posiciona a cópia de trabalho na última versão do mesmo.
Se você entrar no novo diretório `libgit2`, você verá os arquivos de projeto lá, pontros para serem trabalhados ou usados.
Se você quiser clonar o repositório em um diretório chamado de algum outro nome que não "libgit2", você pode especificar isso com uma opção a mais:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Esse comando faz a mesma coisa que o anterior, mas o diretório alvo é chamado de `mylibgit`.

O Git possui uma série de diferentes protocolos de transferências que você pode usar.
O exemplo anterior usa o protocolo `https://`, mas você pode ver também `git://` ou `user@server:path/to/repo.git`, que usa o protocolo de transferência SSH.
<<_git_on_the_server>> introduzirá todas as opções disponíveis com que o servidor pode ser configurado para acessar seu repositório Git e os prós e contras de cada um.
